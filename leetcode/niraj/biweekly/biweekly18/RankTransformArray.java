package biweekly.biweekly18;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

/*
Given an array of integers arr, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:

Rank is an integer starting from 1.
The larger the element, the larger the rank. If two elements are equal, their rank must be the same.
Rank should be as small as possible.


Example 1:

Input: arr = [40,10,20,30]
Output: [4,1,2,3]
Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.
Example 2:

Input: arr = [100,100,100]
Output: [1,1,1]
Explanation: Same elements share the same rank.
Example 3:

Input: arr = [37,12,28,9,100,56,80,5,12]
Output: [5,3,4,2,8,6,7,1,3]
 */
public class RankTransformArray {
    public static void main(String[] args) {
        System.out.println(Arrays.toString(arrayRankTransform(new int[]{40,10,20,30})));
        System.out.println(Arrays.toString(arrayRankTransform(new int[]{37,12,28,9,100,56,80,5,12})));
        System.out.println(Arrays.toString(arrayRankTransform(new int[]{239218,248665,303220,-12045,-177722,182109,388264,-81449,-152614,-410271,460956,113659,76718,-287451,-218992,-324449,293314,-19799,290116,271619,-472746,-371667,-468360,307943,266602,-401487,-156756,-3829,-95362,-333643,343584,-123729,411410,214393,-350508,-48621,215974,271037,-341368,-271945,-78534,255553,-476036,-463205,284430,60101,-274256,87999,162978,-162679,-350364,234147,-144330,-221875,-440744,-380921,429898,-74991,266316,-466709,494430,287893,-210304,277199,37042,-490343,-52044,-43533,-59450,260509,-151896,485015,246106,-18463,-375012,330235,-495314,-305371,-331760,406111,133314,216297,172804,182915,320918,314349,40440,206247,99434,-236239,9452,259019,454910,-270731,147488,129199,-36078,-35463,-424748,466387,-213082,-160963,355464,205367,-237190,-401663,277692,433499,274894,-303739,48240,-247681,399714,311305,259428,-465949,118006,58445,101016,395463,-95350,261265,-254644,-486613,121502,-420267,-138752,249039,-440398,-441127,-249996,-312397,-67706,327901,82536,426647,347738,-67679,-454308,-104773,-240722,-284571,-301616,-106273,-394430,221161,459332,-233469,141654,-367763,264632,172967,56554,291057,52652,-244405,28542,31029,90720,99439,-210734,-186759,-53292,-159981,-440026,223805,453256,480439,-419270,191297,254012,175771,-413682,-26939,-252432,-441729,-35806,-160439,312996,-291549,485814,-181491,-483688,15367,195274,289105,-484084,42219,191134,194005,91072,-67697,291890,97177,-57100,-182349,346566,56925,200552,106839,-366886,353313,85980,-334085,357934,176165,202448,152351,-187070,-272535,-149180,430659,-436714,438573,388920,207335,220074,-220687,292844,-212725,-191618,-180427,407328,241583,-427374,-256135,127764,-199469,-76314,441405,-74360,-93001,467258,380801,392892,294171,-73650,254213,-472784,383295,-237726,-339575,-224156,384803,472182,-239603,-101096,-95097,343114,406929,76236,-378901,-192034,-399467,-163776,8591,-11022,-62951,219060,-237133,467526,-112291,-491864,-122921,384730,233057,44380,493115,160366,-255323,-387952,262623,-101118,317033,253316,-416765,151254,188333,333944,322215,-298390,106609,-479380,132619,-437250,50741,449056,-358225,311762,-200135,81620,-63789,353830,303357,405000,-288713,-419846,-405183,-346756,-286949,380110,234373,-39440,-384001,267170,71177,-65436,-382493,47798,197901,186584,-124345,361546,-436015,-275444,-336213,165214,55957,156928,100559,34610,202265,311924,442355,-440186,362973,-3992,-406377,-236198,258017,-364196,-100677,340206,-48411,39632,486175,367170,354089,22724,-68605,-439338,362541,-424072,381927,-146774,-363855,134764,-287221,-91330,21109,-104096,-16209,168018,-176583,397140,257555,-227034,-190851,-454392,233527,-75910,-192895,-279364,39067,-439410,-13755,-366288,-495233,-201182,491337,318436,77539,22710,-212851,146520,-55929,-492726,142289,-65396,-377045,244510,-149675,-21056,64591,-33166,-377831,-383820,-28365,224518,-57315,377896,497751,162778,-369951,278812,118523,267310,-137435,-43568,305311,225538,120809,-9596,-335293,-150826,354157,382456,-157721,483818,-150415,422956,284555,335998,-266315,490656,254959,467794,414969,-446892,246675,247654,-173891,-199800,-140489,70394,242817,420796,-264741,-174322,-386235,-128144,-256257,468578,-497719,-252892,-254237,294006,-17779,141848,-499321,-402742,-454767,351308,-89749,-346722,-450283,148480,-301681,201394,-360423,-192012,-397837,-238778,312477,103016,-300009,394394,-328351,-153060,374715,192686,111077,-17328,47775,45058,-172439,41860,452547,474006,-255699,-104392,394663,393066,-186639,466668,283467,428990,198773,80672,-9425,354962,287929,371348,-52909,-198490,-199747,464840,131383,-50566,-180031,266044,-490213,-457074,-410171,-56848,-353281,318178,161737,227236,-23837,317622,-90419,64344,182919,-262902,8465,115660,-125333,-184354,-213995,-402752,-60465,-251022,445529,-110924,-329933,300230,39453,-264856,489943,46874,65377,313308,-93957,-296914,-245595,189328,244319,-308222,316201,228420,-45501,-334570,114669,468664,494183,-386710,-451215,-357524,-434101,419454,-433227,-3680,36911,-88302,374137,-344428,412435,197350,148925,-455480,327543,-36614,105921,-266180,-50853,-332146,112517,-355280,-4353,-191518,-33207,12196,421923,169782,468813,99544,399751,46730,359249,-281204,317675,362718,494165,-89664,-250161,-476750,126041,-433420,292339,-452730,20253,-2136,-237865,303578,-76831,137948,284155,474350,119461,-269040,464287,423810,146537,-349564,-175805,-229866,174957,-194568,-69913,276138,-477199,218604,16267,-406466,448501,-468384,-179793,-150126,-473095,16980,259091,452006,-422723,486216,-49289,187450,-353791,480252,16923,428174,-285307,11504,344959,340258,-218295,359012,-14301,193398,232525,381720,-397817,286282,431761,-265524,376043,-353762,-179179,-19392,190223,-82062,-261031,-212300,-373069,474118,-339491,415400,210199,196954,236833,-487332,208251,482414,47973,-286384,72031,267010,-434283,340416,475663,231218,-308711,-116684,183475,465030,50717,-460952,230743,-101926,49633,378780,-168197,480302,85413,-165232,-360225,-66942,-404823,88644,441923,62166,-433619,-269192,17063,140778,295281,142828,-16693,350334,303029,-131808,-103057,-290606,51769,-414316,350675,-25626,-384259,-348152,52407,-4422,376321,-36676,-379429,-294002,144005,-485008,-190081,209186,-495095,-40796,-471133,-256778,123085,172824,61831,-325174,-425839,40716,22251,400990,-367531,141632,-299633,-330318,25817,37876,-226125,-81466,141469,-227288,279,230554,98081,-463396,-159109,373678,168485,172240,26143,34242,-167191,-457340,-417149,198230,384877,-97160,46375,346666,421937,-252692,334603,57598,-426315,-363360,301423,244178,-406727,413460,-468525,-178010,458557,328456,459959,-130310,494529,121660,-174757,-400114,258501,-17488,295103,-57694,490377,-10076,238115,-225098,298381,-495976,205767,143050,-4975,-25076,-361365,-276450,475669,371200,-414257,385458,321945,-212620,384243,120006,415773,-364952,399831,357658,-383839,315420,402619,158446,26449,-2736,189663,95106,12201,61636,387011,466198,199853,-18760,-388569,306282,287409,-219412,-467061,455422,368053,1568,59695})));
    }
    public static int[] arrayRankTransform(int[] arr) {
        List<Integer> sorted = Arrays.stream(arr).boxed().sorted().collect(Collectors.toList());
        HashMap<Integer, Integer>  map = new HashMap<>();
        int rank = 1;
        for (int i = 0; i < sorted.size(); i++) {
            int cur = sorted.get(i);
            if (!map.containsKey(cur)){
                map.put(cur,rank++);
            }
        }
        for (int i = 0; i < arr.length; i++) {
            int curr = arr[i];
            arr[i] = map.get(curr);
        }
        return arr;
    }
}
