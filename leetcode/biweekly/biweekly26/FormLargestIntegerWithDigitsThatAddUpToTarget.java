package biweekly.biweekly26;
/*
    Created on:  May 16, 2020
 */

import java.util.Arrays;

/**
 * Questions: https://leetcode.com/contest/biweekly-contest-26/problems/form-largest-integer-with-digits-that-add-up-to-target/
 */
public class FormLargestIntegerWithDigitsThatAddUpToTarget {
    public static void main(String[] args) {
        System.out.println("****************************** Method 1 *******************************");
        System.out.println(largestNumber(new int[]{4, 3, 2, 5, 6, 7, 2, 5, 5}, 9) + " should be [7772].");
        System.out.println(largestNumber(new int[]{7, 6, 5, 5, 5, 6, 8, 7, 8}, 12) + " should be [85].");
        System.out.println(largestNumber(new int[]{2, 4, 6, 2, 4, 6, 4, 4, 4}, 5) + " should be [0].");
        System.out.println(largestNumber(new int[]{70, 84, 55, 63, 74, 44, 27, 76, 34}, 659) + " should be [99977777777777777777776].");
        System.out.println(largestNumber(new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1}, 5000) + " should be [99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999].");
        System.out.println(largestNumber(new int[]{2, 4, 6, 2, 4, 6, 4, 4, 4}, 5) + " should be [0].");
        System.out.println("****************************** Method 2 *******************************");
        System.out.println(largestNumber_rev1(new int[]{4, 3, 2, 5, 6, 7, 2, 5, 5}, 9) + " should be [7772].");
        System.out.println(largestNumber_rev1(new int[]{7, 6, 5, 5, 5, 6, 8, 7, 8}, 12) + " should be [85].");
        System.out.println(largestNumber_rev1(new int[]{2, 4, 6, 2, 4, 6, 4, 4, 4}, 5) + " should be [0].");
        System.out.println(largestNumber_rev1(new int[]{70, 84, 55, 63, 74, 44, 27, 76, 34}, 659) + " should be [99977777777777777777776].");
        System.out.println(largestNumber_rev1(new int[]{1, 1, 1, 1, 1, 1, 1, 1, 1}, 5000) + " should be
        System.out.println(largestNumber_rev1(new int[]{2, 4, 6, 2, 4, 6, 4, 4, 4}, 5) + " should be [0].");
    }

    public static String largestNumber_rev1(int[] cost, int target) {
        String[] dp = new String[target + 1];
        dp[0] = "";
        for (int row = 1; row <= target; row++) {
            for (int col = 1; col <= cost.length; col++) {
                int curCost = cost[col - 1];
                if (curCost <= row) {
                    String preRow = dp[row - curCost];
                    if (preRow != null) {
                        dp[row] = getMaxString(dp[row] == null ? "" : dp[row], col + preRow);
                    }
                }
            }
        }
        return dp[target] == null ? "0" : dp[target];
    }

    private static String getMaxString(String a, String b) {
        if (a.length() > b.length()) return a;
        if (a.length() < b.length()) return b;
        return a.compareTo(b) > 0 ? a : b;
    }

    public static String largestNumber(int[] cost, int target) {
        int rows = target + 1, cols = cost.length + 1;
        String[] max = new String[rows];
        Arrays.fill(max, "");
        for (int row = 1; row < rows; row++) {
            for (int col = 1; col < cols; col++) {
                int currentCost = cost[col - 1];
                if (row >= currentCost && (max[row - currentCost].length() > 0 || row - currentCost == 0)) {
                    max[row] = getMax(max[row], col + max[row - currentCost]);
                }
            }
        }
        return String.valueOf(max[target].length() == 0 ? "0" : max[target]);
    }

    private static String getMax(String a, String b) {
        if (a.length() < b.length()) return b;
        if (a.length() > b.length()) return a;
        boolean aIsBigger = true;
        int index = 0;
        while (index < a.length()) {
            if (a.charAt(index) < b.charAt(index)) {
                aIsBigger = false;
                break;
            }
            index++;
        }
        return aIsBigger ? a : b;
    }
}
